{"ast":null,"code":"var _jsxFileName = \"/Users/Alex/Documents/Programming/Programming Projects/gold-game-scoring/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ValueButtons from './components/ValueButtons';\nimport ScoreDisplay from './components/ScoreDisplay';\nimport SelectLevel from './components/SelectLevel';\nimport LevelRules from './components/LevelRules';\n\nfunction App() {\n  //Initial states and globals. Later will incorporate a button in UI for changing level\n  const [neutral, setNeutral] = useState(6);\n  const [addOne, setAddOne] = useState(7);\n  const [subOne, setSubOne] = useState(5);\n  const [level, setLevel] = useState('Beginner');\n  const [appState, setAppState] = useState([{\n    displayText: [],\n    endValues: [],\n    endScore: 0,\n    totalScore: 0\n  }]);\n  let newState = [];\n  const xArray = [];\n  const mArray = []; //Functions related to scoring\n  //--------------------------------------------------------------------------------------\n\n  useEffect(() => {\n    let newLevel = '';\n    let options = document.getElementsByName('level');\n\n    for (var i = 0; i < options.length; i++) {\n      if (options[i].value === level) {\n        options[i].checked = \"checked\";\n        newLevel = options[i].value;\n      } else {\n        continue;\n      }\n\n      setLevel(newLevel);\n      newRules(newLevel);\n    }\n  }, [level]); //Keeps the score list scrolled to the current end\n\n  function updateScroll() {\n    const element = document.getElementById('score-display');\n    element.scrollTop = element.scrollHeight;\n  }\n\n  function sortDisplayText() {\n    for (var i = 0; i < appState[appState.length - 1].displayText.length; i++) {\n      if (appState[appState.length - 1].displayText[i] === 'X') {\n        appState[appState.length - 1].displayText.splice(i, 1);\n        xArray.push('X');\n        i--;\n      } else if (appState[appState.length - 1].displayText[i] === 'M') {\n        appState[appState.length - 1].displayText.splice(i, 1);\n        i--;\n        mArray.push('M');\n      } else {\n        continue;\n      }\n    }\n\n    appState[appState.length - 1].displayText.sort((a, b) => parseInt(b) - parseInt(a));\n    appState[appState.length - 1].displayText = xArray.concat(appState[appState.length - 1].displayText, mArray);\n  } //Decrements both total score and end score\n\n\n  function decrementScore() {\n    newState[newState.length - 1].endScore--;\n    newState[newState.length - 1].totalScore--;\n  } //Increments total score and end score\n\n\n  function incrementScore() {\n    newState[newState.length - 1].endScore++;\n    newState[newState.length - 1].totalScore++;\n  } //Function to change increment and decrement end score and total score based on either a value input or a value deleted. \n\n\n  function handleScoreChange(level, value, opt1, opt2) {\n    switch (level) {\n      case 'Beginner':\n        if (value > 6) {\n          opt1();\n        } else if (value === 6) {\n          break;\n        } else if (value < 6) {\n          opt2();\n        }\n\n        break;\n\n      case 'Intermediate':\n        if (value > 7) {\n          opt1();\n        } else if (value === 7) {\n          break;\n        } else if (value < 7) {\n          opt2();\n        }\n\n        break;\n\n      case 'Advanced':\n        if (value > 8) {\n          opt1();\n        } else if (value === 8) {\n          break;\n        } else if (value < 8) {\n          opt2();\n        }\n\n        break;\n\n      case 'Elite':\n        if (value > 9) {\n          opt1();\n        } else if (value === 9) {\n          break;\n        } else if (value < 9) {\n          opt2();\n        }\n\n        break;\n\n      default:\n        return;\n    }\n  } //Function for handling all inputs from ValueButton buttons\n\n\n  const handleButton = e => {\n    //Code that runs when next end button is pressed\n    if (e.value === \"NEXT END\") {\n      //sort previous end to be displayed in descending order\n      sortDisplayText();\n      newState = [...appState];\n      const lastTotal = newState[newState.length - 1].totalScore;\n      const nextEnd = {\n        displayText: [],\n        endValues: [],\n        endScore: 0,\n        totalScore: lastTotal\n      };\n      newState.push(nextEnd);\n      setAppState(newState); //Code that runs when an arrow value is pressed\n    } else if (!isNaN(e.value)) {\n      newState = [...appState];\n      updateScroll();\n\n      if (newState[newState.length - 1].endValues.length < 6) {\n        newState[newState.length - 1].endValues.push(parseInt(e.value, 10));\n        newState[newState.length - 1].displayText.push(e.innerHTML);\n        handleScoreChange(level, e.value, incrementScore, decrementScore);\n        setAppState(newState);\n      } else {\n        return;\n      } //Code that runs when clear is pressed\n\n    } else if (e.value === 'CLEAR') {\n      newState = [...appState];\n      const deletedValue = newState[newState.length - 1].endValues.pop();\n      newState[newState.length - 1].displayText.pop();\n      handleScoreChange(level, deletedValue, decrementScore, incrementScore);\n      setAppState(newState);\n    }\n  }; //Functions for the control panel\n  //----------------------------------------------------------------------------------------\n  //Updates the control panel rules section\n\n\n  const newRules = newLevel => {\n    let newNeutral = 0;\n\n    if (newLevel === 'Beginner') {\n      newNeutral = 6;\n      setNeutral(6);\n    } else if (newLevel === 'Intermediate') {\n      newNeutral = 7;\n      setNeutral(7);\n    } else if (newLevel === 'Advanced') {\n      newNeutral = 8;\n      setNeutral(8);\n    } else if (newLevel === 'Elite') {\n      newNeutral = 9;\n      setNeutral(9);\n    }\n\n    setAddOne(newNeutral + 1);\n    setSubOne(newNeutral - 1);\n  }; //Updates the level when a new one is selected\n\n\n  const handleLevel = e => {\n    let newLevel = '';\n    e.preventDefault();\n\n    if (appState[appState.length - 1].endValues.length === 0) {\n      let options = document.getElementsByName('level');\n\n      for (var i = 0; i < options.length; i++) {\n        if (options[i].checked) {\n          newLevel = options[i].value;\n        } else {\n          continue;\n        }\n\n        setLevel(newLevel);\n        newRules(newLevel);\n      }\n    } else {\n      return;\n    }\n  }; //Deletes current end and allows modifications to previous end\n\n\n  const lastEnd = () => {\n    if (appState.length > 1) {\n      newState = [...appState];\n      newState.pop();\n      setAppState(newState);\n    } else {\n      return;\n    }\n  }; //Resets appState\n\n\n  const resetState = () => {\n    setAppState([{\n      displayText: [],\n      endValues: [],\n      endScore: 0,\n      totalScore: 0\n    }]);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scorecard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ScoreDisplay, {\n    appState: appState,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ValueButtons, {\n    handleButton: handleButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"control-panel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"control-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 9\n    }\n  }, \"Control Panel\"), /*#__PURE__*/React.createElement(LevelRules, {\n    level: level,\n    addOne: addOne,\n    subOne: subOne,\n    neutral: neutral,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SelectLevel, {\n    handleLevel: handleLevel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"control-buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"level-submit blue\",\n    onClick: lastEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 11\n    }\n  }, \"Last End\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"level-submit blue mb-5\",\n    onClick: resetState,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 11\n    }\n  }, \"Reset\"))));\n}\n\nexport default App;\n/*\nThings to add:\n\n-grey out buttons when they are not a valid action\n\n\n*/","map":{"version":3,"sources":["/Users/Alex/Documents/Programming/Programming Projects/gold-game-scoring/src/App.js"],"names":["React","useState","useEffect","ValueButtons","ScoreDisplay","SelectLevel","LevelRules","App","neutral","setNeutral","addOne","setAddOne","subOne","setSubOne","level","setLevel","appState","setAppState","displayText","endValues","endScore","totalScore","newState","xArray","mArray","newLevel","options","document","getElementsByName","i","length","value","checked","newRules","updateScroll","element","getElementById","scrollTop","scrollHeight","sortDisplayText","splice","push","sort","a","b","parseInt","concat","decrementScore","incrementScore","handleScoreChange","opt1","opt2","handleButton","e","lastTotal","nextEnd","isNaN","innerHTML","deletedValue","pop","newNeutral","handleLevel","preventDefault","lastEnd","resetState"],"mappings":"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","sourcesContent":["import React, {useState,useEffect} from 'react';\nimport './App.css';\nimport ValueButtons from './components/ValueButtons';\nimport ScoreDisplay from './components/ScoreDisplay';\nimport SelectLevel from './components/SelectLevel';\nimport LevelRules from './components/LevelRules';\n\n\n\nfunction App() {\n  //Initial states and globals. Later will incorporate a button in UI for changing level\n  const [neutral, setNeutral] = useState(6)\n  const [addOne, setAddOne] = useState(7)\n  const [subOne, setSubOne] = useState(5)\n  const [level, setLevel] = useState('Beginner')\n  const [appState, setAppState] = useState(\n    [\n      {\n        displayText: [],\n        endValues: [],\n        endScore: 0,\n        totalScore: 0\n      }\n    ]);\n    let newState = []\n    const xArray = []\n    const mArray = []\n  \n  //Functions related to scoring\n  //--------------------------------------------------------------------------------------\n  \nuseEffect(() => {\n  let newLevel = ''\n  let options = document.getElementsByName('level') \n  for (var i=0; i<options.length; i++) {\n    if(options[i].value === level) {\n        options[i].checked = \"checked\"\n        newLevel = options[i].value;\n    } else {\n      continue\n    }\n  setLevel(newLevel)\n  newRules(newLevel)\n  }\n}, [level])\n\n  //Keeps the score list scrolled to the current end\n  function updateScroll () {\n    const element = document.getElementById('score-display');\n    element.scrollTop = (element.scrollHeight);\n  }\n\n  function sortDisplayText() {\n    for (var i = 0; i< appState[appState.length-1].displayText.length; i++) {\n      if (appState[appState.length-1].displayText[i] === 'X') {\n        appState[appState.length-1].displayText.splice(i,1)\n        xArray.push('X')\n        i--\n      } else if (appState[appState.length-1].displayText[i] === 'M') {\n        appState[appState.length-1].displayText.splice(i,1)\n        i--\n        mArray.push('M')\n      } else {\n        continue\n      }\n    }\n    appState[appState.length-1].displayText.sort((a,b) => parseInt(b)-parseInt(a))\n    appState[appState.length-1].displayText = xArray.concat(appState[appState.length-1].displayText, mArray)\n  }\n\n  //Decrements both total score and end score\n  function decrementScore () {\n    newState[newState.length-1].endScore--\n    newState[newState.length-1].totalScore--\n  }\n\n  //Increments total score and end score\n  function incrementScore() {\n    newState[newState.length-1].endScore++\n    newState[newState.length-1].totalScore++\n  } \n\n  //Function to change increment and decrement end score and total score based on either a value input or a value deleted. \n  function handleScoreChange (level, value, opt1, opt2) {\n    switch (level) {\n      case 'Beginner':\n        if (value > 6) {\n          opt1()\n        } else if (value === 6) {\n          break\n        } else if (value < 6) {\n          opt2()\n        }\n        break;\n      case 'Intermediate':\n        if (value > 7) {\n          opt1()\n        } else if (value === 7) {\n          break\n        } else if (value < 7) {\n          opt2()\n        }\n        break;\n      case 'Advanced':\n        if (value > 8) {\n          opt1()\n        } else if (value === 8) {\n          break\n        } else if (value < 8) {\n          opt2()\n        }\n        break;\n      case 'Elite':\n        if (value > 9) {\n          opt1()\n        } else if (value === 9) {\n          break\n        } else if (value < 9) {\n          opt2()\n        }\n        break;\n      default:\n        return\n    }\n  }\n\n  //Function for handling all inputs from ValueButton buttons\n  const handleButton = (e) => {\n    //Code that runs when next end button is pressed\n    if (e.value === \"NEXT END\"){\n      //sort previous end to be displayed in descending order\n      sortDisplayText()\n      newState = [...appState]\n      const lastTotal = newState[newState.length-1].totalScore\n      const nextEnd = {displayText: [], endValues: [], endScore: 0, totalScore: lastTotal ,}\n      newState.push(nextEnd)\n      setAppState(newState)\n      \n\n      //Code that runs when an arrow value is pressed\n    } else if (!isNaN(e.value)) {\n      newState = [...appState]\n      updateScroll()\n      if (newState[newState.length-1].endValues.length < 6) {\n        newState[newState.length-1].endValues.push(parseInt(e.value, 10))\n        newState[newState.length-1].displayText.push(e.innerHTML)\n        handleScoreChange(level, e.value, incrementScore, decrementScore)\n        setAppState(newState)\n      } else {\n        return\n      }\n\n      //Code that runs when clear is pressed\n    } else if (e.value === 'CLEAR') {\n      newState = [...appState]\n      const deletedValue = newState[newState.length-1].endValues.pop()\n      newState[newState.length-1].displayText.pop()\n      handleScoreChange(level, deletedValue, decrementScore, incrementScore)\n      setAppState(newState)\n    }\n  }\n\n  //Functions for the control panel\n  //----------------------------------------------------------------------------------------\n\n  //Updates the control panel rules section\n  const newRules =  (newLevel) => {\n    let newNeutral = 0\n    if (newLevel === 'Beginner') {\n        newNeutral = 6\n        setNeutral(6)\n\n    } else if (newLevel === 'Intermediate') {\n        newNeutral = 7\n        setNeutral(7)\n\n    } else if (newLevel === 'Advanced') {\n        newNeutral = 8\n        setNeutral(8)\n\n    } else if (newLevel === 'Elite') {\n        newNeutral = 9\n        setNeutral(9)\n\n    }\n    setAddOne(newNeutral+1)\n    setSubOne(newNeutral-1)\n  }\n\n  //Updates the level when a new one is selected\n  const handleLevel = (e) => {\n    let newLevel = ''\n    e.preventDefault()\n    if (appState[appState.length-1].endValues.length === 0) {\n      let options = document.getElementsByName('level') \n      for (var i=0; i<options.length; i++) {\n        if(options[i].checked) {\n            newLevel = options[i].value;\n        } else {\n          continue\n        }\n      setLevel(newLevel)\n      newRules(newLevel)\n      }\n    } else {\n      return\n    }\n  }\n\n  //Deletes current end and allows modifications to previous end\n  const lastEnd = () => {\n    if (appState.length > 1) {\n      newState = [...appState]\n      newState.pop()\n      setAppState(newState)\n    } else {\n      return\n    }\n  }\n\n  //Resets appState\n  const resetState = () => {\n    setAppState(\n      [\n        {\n          displayText: [],\n          endValues: [],\n          endScore: 0,\n          totalScore: 0\n        }\n      ]);\n  }\n  \n  \n\n\n\n  \n  return (\n    <div className=\"App\">\n      <div className = \"scorecard\">\n        <ScoreDisplay appState = {appState} />\n        <ValueButtons handleButton = {handleButton} />\n      </div>\n      <div className = \"control-panel\">\n        <h3 className = \"control-title\">Control Panel</h3>\n        <LevelRules level = {level} addOne = {addOne} subOne = {subOne} neutral = {neutral} />\n        <SelectLevel handleLevel = {handleLevel} />\n\n        <div className = \"control-buttons\">\n          <button className = \"level-submit blue\" onClick = {lastEnd} >Last End</button>\n          <button className = \"level-submit blue mb-5\" onClick = {resetState} >Reset</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n/*\nThings to add:\n\n-grey out buttons when they are not a valid action\n\n\n*/\n"]},"metadata":{},"sourceType":"module"}