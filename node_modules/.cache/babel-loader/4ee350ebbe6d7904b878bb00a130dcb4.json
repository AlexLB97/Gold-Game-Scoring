{"ast":null,"code":"var _jsxFileName = \"/Users/Alex/Documents/Programming/Programming Projects/gold-game-scoring/src/App.js\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport ValueButtons from './components/ValueButtons';\nimport { type } from 'os';\n\nfunction App() {\n  const [appState, setAppState] = useState([{\n    level: 'beginner'\n  }, {\n    displayText: [],\n    endValues: [],\n    endScore: 0,\n    totalScore: 0\n  }]);\n  let newState = [];\n\n  const handleButton = e => {\n    console.log(e.innerHTML);\n\n    if (e.value === \"NEXT END\") {\n      //sort previous end to be displayed in descending order\n      appState[appState.length - 1].endValues.sort((a, b) => b - a);\n      newState = [...appState];\n      const lastTotal = newState[newState.length - 1].totalScore;\n      const nextEnd = {\n        displayText: [],\n        endValues: [],\n        endScore: 0,\n        totalScore: lastTotal\n      };\n      newState.push(nextEnd);\n      setAppState(newState);\n    } else if (!isNaN(e.value)) {\n      newState = [...appState];\n      newState[newState.length - 1].endValues.push(parseInt(e.value, 10));\n      newState[newState.length - 1].displayText.push(e.innerHTML);\n\n      switch (appState[0].level) {\n        case 'beginner':\n          if (e.value > 6) {\n            newState[newState.length - 1].endScore++;\n          } else if (e.value === 6) {\n            break;\n          } else if (e.value < 6) {\n            newState[newState.length - 1].endScore--;\n          }\n\n          break;\n\n        case 'intermediate':\n          if (e.value > 7) {\n            newState[newState.length - 1].endScore++;\n          } else if (e.value === 7) {\n            break;\n          } else if (e.value < 7) {\n            newState[newState.length - 1].endScore--;\n          }\n\n          break;\n\n        case 'advanced':\n          if (e.value > 8) {\n            newState[newState.length - 1].endScore++;\n          } else if (e.value === 8) {\n            break;\n          } else if (e.value < 8) {\n            newState[newState.length - 1].endScore--;\n          }\n\n          break;\n\n        case 'expert':\n          if (e.value > 9) {\n            newState[newState.length - 1].endScore++;\n          } else if (e.value === 9) {\n            break;\n          } else if (e.value < 9) {\n            newState[newState.length - 1].endScore--;\n          }\n\n          break;\n      }\n\n      setAppState(newState);\n    } else if (e.value === 'CLEAR') {\n      newState = [...appState];\n      newState[newState.length - 1].endValues.pop();\n      newState[newState.length - 1].displayText.pop();\n      setAppState(newState);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scorecard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"score-display\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ValueButtons, {\n    handleButton: handleButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default App;\n/*\nGold game scoring app\n\nKey functionality:\n  -choose level and format\n    -beginner, intermediate, advanced and expert levels\n    -choose 3, 6, or 9 arrow ends\n\n  -input arrow values and have them displayed in 'scorecard' section, along with\n  end points and total points\n    -app must only allow user to input the correct number of arrows each end\n    -backspace button to modify arrow values before submitting end\n    -next end button to move to the next line of scoring\n    -button for each score value: m-10.\n    -reset button to start over completely\n\n  -scoring levels\n    -beginner mode: \n      -7 ring and in is 1 point, 6 ring is neutral, 5 ring and out is -1\n    -intermediate mode\n      -8 ring and in is 1 point, 7 ring is neutral, 8 ring and out is -1\n    -advanced mode\n      -9 ring and in is 1 point, 8 is neutral, 7 and out -1\n    -expert mode\n      -10 ring is one point, 9 is neutral, 8 ring and out is -1\n\n\nApp Design\n\n  Components\n    App container\n      -parent container for entire app\n\n    Scoring interface\n      -contains the scoring buttons and scorecard\n      Arrow values\n        -the group of buttons including m-X, backspace, next end, and reset\n      Scorecard\n        -lists the arrow values for each end, their corresponding gold game score,\n         and the total score for the round\n      \n    Settings interface\n      -sidebar to the scoring interface\n\n      Select level component\n        -radio buttons to choose between beginner, intermediate, advanced, and expert\n\n      Choose format component\n        -radio buttons for 3, 6, or 9 arrow ends\n\n      Explanation section:\n        -explains the rules for the level they have selected\n\n\nPseuocode for components\n\n  App container\n    Styles:\n      -center the app in the screen\n      -set the display to flex\n      -set flex direction to row\n    Global state\n      -end arrow values and the resulting gold game score are stored in global state\n      -each end is a new object in the state array\n    Logic\n      -\n\n\n\n*/","map":{"version":3,"sources":["/Users/Alex/Documents/Programming/Programming Projects/gold-game-scoring/src/App.js"],"names":["React","useState","ValueButtons","type","App","appState","setAppState","level","displayText","endValues","endScore","totalScore","newState","handleButton","e","console","log","innerHTML","value","length","sort","a","b","lastTotal","nextEnd","push","isNaN","parseInt","pop"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport ValueButtons from './components/ValueButtons';\nimport { type } from 'os';\n\nfunction App() {\n  const [appState, setAppState] = useState(\n    [\n      {level: 'beginner'},\n      {\n        displayText: [],\n        endValues: [],\n        endScore: 0,\n        totalScore: 0\n      }\n    ]);\n  \n  let newState = []\n  \n  const handleButton = (e) => {\n    console.log(e.innerHTML)\n    if (e.value === \"NEXT END\"){\n      //sort previous end to be displayed in descending order\n      appState[appState.length-1].endValues.sort((a,b) => b-a)\n\n      newState = [...appState]\n      const lastTotal = newState[newState.length-1].totalScore\n      const nextEnd = {displayText: [], endValues: [], endScore: 0, totalScore: lastTotal ,}\n      newState.push(nextEnd)\n      setAppState(newState)\n\n    } else if (!isNaN(e.value)) {\n      newState = [...appState]\n      newState[newState.length-1].endValues.push(parseInt(e.value, 10))\n      newState[newState.length-1].displayText.push(e.innerHTML)\n      switch (appState[0].level) {\n        case 'beginner':\n          if (e.value > 6) {\n            newState[newState.length-1].endScore++\n          } else if (e.value === 6) {\n            break\n          } else if (e.value < 6) {\n            newState[newState.length-1].endScore--\n          }\n          break;\n        case 'intermediate':\n          if (e.value > 7) {\n            newState[newState.length-1].endScore++\n          } else if (e.value === 7) {\n            break\n          } else if (e.value < 7) {\n            newState[newState.length-1].endScore--\n          }\n          break;\n        case 'advanced':\n          if (e.value > 8) {\n            newState[newState.length-1].endScore++\n          } else if (e.value === 8) {\n            break\n          } else if (e.value < 8) {\n            newState[newState.length-1].endScore--\n          }\n          break;\n        case 'expert':\n          if (e.value > 9) {\n            newState[newState.length-1].endScore++\n          } else if (e.value === 9) {\n            break\n          } else if (e.value < 9) {\n            newState[newState.length-1].endScore--\n          }\n          break;\n      }\n      setAppState(newState)\n\n    } else if (e.value === 'CLEAR') {\n      newState = [...appState]\n      newState[newState.length-1].endValues.pop()\n      newState[newState.length-1].displayText.pop()\n      setAppState(newState)\n    }\n  }\n\n  \n  return (\n    <div className=\"App\">\n      <div className = \"scorecard\">\n        <div className = \"score-display\">\n\n        </div>\n        <ValueButtons handleButton = {handleButton} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n/*\nGold game scoring app\n\nKey functionality:\n  -choose level and format\n    -beginner, intermediate, advanced and expert levels\n    -choose 3, 6, or 9 arrow ends\n\n  -input arrow values and have them displayed in 'scorecard' section, along with\n  end points and total points\n    -app must only allow user to input the correct number of arrows each end\n    -backspace button to modify arrow values before submitting end\n    -next end button to move to the next line of scoring\n    -button for each score value: m-10.\n    -reset button to start over completely\n\n  -scoring levels\n    -beginner mode: \n      -7 ring and in is 1 point, 6 ring is neutral, 5 ring and out is -1\n    -intermediate mode\n      -8 ring and in is 1 point, 7 ring is neutral, 8 ring and out is -1\n    -advanced mode\n      -9 ring and in is 1 point, 8 is neutral, 7 and out -1\n    -expert mode\n      -10 ring is one point, 9 is neutral, 8 ring and out is -1\n\n\nApp Design\n\n  Components\n    App container\n      -parent container for entire app\n\n    Scoring interface\n      -contains the scoring buttons and scorecard\n      Arrow values\n        -the group of buttons including m-X, backspace, next end, and reset\n      Scorecard\n        -lists the arrow values for each end, their corresponding gold game score,\n         and the total score for the round\n      \n    Settings interface\n      -sidebar to the scoring interface\n\n      Select level component\n        -radio buttons to choose between beginner, intermediate, advanced, and expert\n\n      Choose format component\n        -radio buttons for 3, 6, or 9 arrow ends\n\n      Explanation section:\n        -explains the rules for the level they have selected\n\n\nPseuocode for components\n\n  App container\n    Styles:\n      -center the app in the screen\n      -set the display to flex\n      -set flex direction to row\n    Global state\n      -end arrow values and the resulting gold game score are stored in global state\n      -each end is a new object in the state array\n    Logic\n      -\n\n\n\n*/\n"]},"metadata":{},"sourceType":"module"}