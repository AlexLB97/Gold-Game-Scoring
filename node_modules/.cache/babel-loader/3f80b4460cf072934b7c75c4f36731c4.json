{"ast":null,"code":"var _jsxFileName = \"/Users/Alex/Documents/Programming/Programming Projects/gold-game-scoring/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ValueButtons from './components/ValueButtons';\nimport ScoreDisplay from './components/ScoreDisplay';\nimport SelectLevel from './components/SelectLevel';\nimport LevelRules from './components/LevelRules';\nimport SetGoal from './components/SetGoal';\n\nfunction App() {\n  //Initial states and globals. Later will incorporate a button in UI for changing level\n  const [completed, setCompleted] = useState(false);\n  const [goal, setGoal] = useState(0);\n  const [rules, setRules] = useState([{\n    neutral: 0,\n    addOne: 0,\n    subOne: 0\n  }]);\n  const [level, setLevel] = useState('Advanced');\n  const [appState, setAppState] = useState([{\n    displayText: [],\n    endValues: [],\n    endScore: 0,\n    totalScore: 0\n  }]);\n  let newState = [];\n  const xArray = [];\n  const mArray = []; //Functions related to scoring\n  //--------------------------------------------------------------------------------------\n\n  useEffect(() => {\n    let options = document.getElementsByName('level');\n\n    for (var i = 0; i < options.length; i++) {\n      if (options[i].value === level) {\n        options[i].checked = \"checked\";\n      } else {\n        continue;\n      }\n\n      newRules(level);\n    }\n  }, [level]);\n  useEffect(() => {\n    const clearButton = document.getElementById('CLEAR');\n    const nextButton = document.getElementById('NEXT');\n    const changeButton = document.getElementById('changeLevel');\n    const lastButton = document.getElementById('last');\n    const resetButton = document.getElementById('reset');\n\n    if (appState[appState.length - 1].endValues.length === 0) {\n      clearButton.disabled = true;\n    } else {\n      clearButton.disabled = false;\n    }\n\n    if (appState[appState.length - 1].endValues.length === 6) {\n      nextButton.disabled = false;\n    } else {\n      nextButton.disabled = true;\n    }\n\n    if (appState[appState.length - 1].endValues.length === 0) {\n      changeButton.disabled = false;\n    } else {\n      changeButton.disabled = true;\n    }\n\n    if (appState.length > 1) {\n      lastButton.disabled = false;\n    } else {\n      lastButton.disabled = true;\n    }\n\n    if (appState.length === 1 && appState[0].endValues.length === 0) {\n      resetButton.disabled = true;\n    } else {\n      resetButton.disabled = false;\n    }\n\n    if (appState[appState.length - 1].totalScore === goal && goal !== 0 && completed === false) {\n      alert('Congratulations, you completed your gold game!');\n      setCompleted(true);\n    } else {\n      return;\n    }\n  }, [appState, goal, completed]);\n  useEffect(() => {\n    const goalButton = document.getElementsByClassName('goal-button');\n\n    if (goal !== 0) {\n      goalButton[0].disabled = true;\n    } else {\n      goalButton[0].disabled = false;\n    }\n  }, [goal]);\n  useEffect(() => {\n    const storedGoal = localStorage.getItem('goal');\n    const storedState = JSON.parse(localStorage.getItem('appState'));\n    const newState = storedState ? storedState : appState;\n    setAppState(newState);\n    const newGoal = storedGoal ? storedGoal : 0;\n    setGoal(newGoal);\n  }, []); //Keeps the score list scrolled to the current end\n\n  function updateScroll() {\n    const element = document.getElementById('score-display');\n    element.scrollTop = element.scrollHeight;\n  }\n\n  function sortDisplayText() {\n    for (var i = 0; i < appState[appState.length - 1].displayText.length; i++) {\n      if (appState[appState.length - 1].displayText[i] === 'X') {\n        appState[appState.length - 1].displayText.splice(i, 1);\n        xArray.push('X');\n        i--;\n      } else if (appState[appState.length - 1].displayText[i] === 'M') {\n        appState[appState.length - 1].displayText.splice(i, 1);\n        i--;\n        mArray.push('M');\n      } else {\n        continue;\n      }\n    }\n\n    appState[appState.length - 1].displayText.sort((a, b) => parseInt(b) - parseInt(a));\n    appState[appState.length - 1].displayText = xArray.concat(appState[appState.length - 1].displayText, mArray);\n  } //Decrements both total score and end score\n\n\n  function decrementScore() {\n    newState[newState.length - 1].endScore--;\n    newState[newState.length - 1].totalScore--;\n  } //Increments total score and end score\n\n\n  function incrementScore() {\n    newState[newState.length - 1].endScore++;\n    newState[newState.length - 1].totalScore++;\n  } //Function to change increment and decrement end score and total score based on either a value input or a value deleted. \n\n\n  function handleScoreChange(level, value, opt1, opt2) {\n    switch (level) {\n      case 'Beginner':\n        if (value > 6) {\n          opt1();\n        } else if (value === 6) {\n          break;\n        } else if (value < 6) {\n          opt2();\n        }\n\n        break;\n\n      case 'Intermediate':\n        if (value > 7) {\n          opt1();\n        } else if (value === 7) {\n          break;\n        } else if (value < 7) {\n          opt2();\n        }\n\n        break;\n\n      case 'Advanced':\n        if (value > 8) {\n          opt1();\n        } else if (value === 8) {\n          break;\n        } else if (value < 8) {\n          opt2();\n        }\n\n        break;\n\n      case 'Elite':\n        if (value > 9) {\n          opt1();\n        } else if (value === 9) {\n          break;\n        } else if (value < 9) {\n          opt2();\n        }\n\n        break;\n\n      default:\n        return;\n    }\n  } //Function for handling all inputs from ValueButton buttons\n\n\n  const handleButton = e => {\n    //Code that runs when next end button is pressed\n    if (e.value === \"NEXT END\") {\n      //sort previous end to be displayed in descending order\n      sortDisplayText();\n      newState = [...appState];\n      const lastTotal = newState[newState.length - 1].totalScore;\n      const nextEnd = {\n        displayText: [],\n        endValues: [],\n        endScore: 0,\n        totalScore: lastTotal\n      };\n      newState.push(nextEnd);\n      setAppState(newState);\n      localStorage.setItem('appState', JSON.stringify(newState)); //Code that runs when an arrow value is pressed\n    } else if (!isNaN(e.value)) {\n      newState = [...appState];\n      updateScroll();\n\n      if (newState[newState.length - 1].endValues.length < 6) {\n        newState[newState.length - 1].endValues.push(parseInt(e.value, 10));\n        newState[newState.length - 1].displayText.push(e.innerHTML);\n        handleScoreChange(level, e.value, incrementScore, decrementScore);\n        setAppState(newState);\n        localStorage.setItem('appState', JSON.stringify(newState));\n      } else {\n        return;\n      } //Code that runs when clear is pressed\n\n    } else if (e.value === 'CLEAR') {\n      newState = [...appState];\n      const deletedValue = newState[newState.length - 1].endValues.pop();\n      newState[newState.length - 1].displayText.pop();\n      handleScoreChange(level, deletedValue, decrementScore, incrementScore);\n      setAppState(newState);\n      localStorage.setItem('appState', JSON.stringify(newState));\n    }\n  }; //Functions for the control panel\n  //----------------------------------------------------------------------------------------\n  //Updates the control panel rules section\n\n\n  const newRules = level => {\n    const newRules = [...rules];\n\n    if (level === 'Beginner') {\n      newRules[0].neutral = 6;\n    } else if (level === 'Intermediate') {\n      newRules[0].neutral = 7;\n    } else if (level === 'Advanced') {\n      newRules[0].neutral = 8;\n    } else if (level === 'Elite') {\n      newRules[0].neutral = 9;\n    }\n\n    newRules[0].addOne = newRules[0].neutral + 1;\n    newRules[0].subOne = newRules[0].neutral - 1;\n    setRules(newRules);\n    localStorage.setItem('rules', JSON.stringify(rules));\n  }; //Updates the level when a new one is selected\n\n\n  const handleLevel = e => {\n    let newLevel = '';\n    e.preventDefault();\n\n    if (appState[appState.length - 1].endValues.length === 0) {\n      let options = document.getElementsByName('level');\n\n      for (var i = 0; i < options.length; i++) {\n        if (options[i].checked) {\n          newLevel = options[i].value;\n          setLevel(newLevel);\n          break;\n        } else {\n          continue;\n        }\n      }\n    } else {\n      return;\n    }\n  }; //Deletes current end and allows modifications to previous end\n\n\n  const lastEnd = () => {\n    if (appState.length > 1) {\n      newState = [...appState];\n      newState.pop();\n      setAppState(newState);\n    } else {\n      return;\n    }\n  }; //Resets appState\n\n\n  const resetState = () => {\n    setAppState([{\n      displayText: [],\n      endValues: [],\n      endScore: 0,\n      totalScore: 0\n    }]);\n    setCompleted(false);\n    setGoal(0);\n    document.getElementById('goal-input').value = '';\n    localStorage.clear();\n  };\n\n  const handleGoal = () => {\n    const goalInput = document.getElementById('goal-input').value;\n    localStorage.setItem('goal', goalInput);\n    setGoal(Number(goalInput));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scorecard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ScoreDisplay, {\n    appState: appState,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ValueButtons, {\n    handleButton: handleButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"control-panel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"control-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 9\n    }\n  }, \"Control Panel\"), /*#__PURE__*/React.createElement(SetGoal, {\n    handleGoal: handleGoal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(LevelRules, {\n    level: level,\n    rules: rules,\n    goal: goal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SelectLevel, {\n    handleLevel: handleLevel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"control-buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"level-submit blue\",\n    id: \"last\",\n    onClick: lastEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 11\n    }\n  }, \"Last End\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"level-submit blue mb-5\",\n    id: \"reset\",\n    onClick: resetState,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 11\n    }\n  }, \"Reset\"))));\n}\n\nexport default App;\n/*\nThings to add:\n\n-grey out buttons when they are not a valid action\n\n\n*/","map":{"version":3,"sources":["/Users/Alex/Documents/Programming/Programming Projects/gold-game-scoring/src/App.js"],"names":["React","useState","useEffect","ValueButtons","ScoreDisplay","SelectLevel","LevelRules","SetGoal","App","completed","setCompleted","goal","setGoal","rules","setRules","neutral","addOne","subOne","level","setLevel","appState","setAppState","displayText","endValues","endScore","totalScore","newState","xArray","mArray","options","document","getElementsByName","i","length","value","checked","newRules","clearButton","getElementById","nextButton","changeButton","lastButton","resetButton","disabled","alert","goalButton","getElementsByClassName","storedGoal","localStorage","getItem","storedState","JSON","parse","newGoal","updateScroll","element","scrollTop","scrollHeight","sortDisplayText","splice","push","sort","a","b","parseInt","concat","decrementScore","incrementScore","handleScoreChange","opt1","opt2","handleButton","e","lastTotal","nextEnd","setItem","stringify","isNaN","innerHTML","deletedValue","pop","handleLevel","newLevel","preventDefault","lastEnd","resetState","clear","handleGoal","goalInput","Number"],"mappings":"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","sourcesContent":["import React, {useState,useEffect} from 'react';\nimport './App.css';\nimport ValueButtons from './components/ValueButtons';\nimport ScoreDisplay from './components/ScoreDisplay';\nimport SelectLevel from './components/SelectLevel';\nimport LevelRules from './components/LevelRules';\nimport SetGoal from './components/SetGoal';\n\n\n\nfunction App() {\n  //Initial states and globals. Later will incorporate a button in UI for changing level\n  const [completed, setCompleted] = useState(false)\n  const [goal, setGoal] = useState(0)\n  const[rules, setRules] = useState(\n    [\n      {\n        neutral: 0,\n        addOne: 0,\n        subOne: 0\n      }\n    ]\n  )\n  const [level, setLevel] = useState('Advanced')\n  const [appState, setAppState] = useState(\n    [\n      {\n        displayText: [],\n        endValues: [],\n        endScore: 0,\n        totalScore: 0\n      }\n    ]);\n    let newState = []\n    const xArray = []\n    const mArray = []\n  \n  //Functions related to scoring\n  //--------------------------------------------------------------------------------------\n  \nuseEffect(() => {\n  let options = document.getElementsByName('level') \n  for (var i=0; i<options.length; i++) {\n    if(options[i].value === level) {\n        options[i].checked = \"checked\"\n    } else {\n      continue\n    }\n  newRules(level)\n  }\n}, [level]);\n\nuseEffect(() => {\n  const clearButton = document.getElementById('CLEAR')\n  const nextButton = document.getElementById('NEXT')\n  const changeButton = document.getElementById('changeLevel')\n  const lastButton = document.getElementById('last')\n  const resetButton = document.getElementById('reset')\n  if (appState[appState.length-1].endValues.length === 0) {\n    clearButton.disabled = true;\n  } else {\n    clearButton.disabled = false;\n  }\n  if (appState[appState.length-1].endValues.length === 6) {\n    nextButton.disabled = false\n  } else {\n    nextButton.disabled = true;\n  }\n  if (appState[appState.length-1].endValues.length === 0) {\n    changeButton.disabled = false;\n  } else {\n    changeButton.disabled = true;\n  }\n  if (appState.length > 1) {\n    lastButton.disabled = false;\n  } else {\n    lastButton.disabled = true;\n  }\n  if (appState.length === 1 && appState[0].endValues.length === 0) {\n    resetButton.disabled = true;\n  } else {\n    resetButton.disabled = false;\n  }\n  if (appState[appState.length-1].totalScore === goal && goal !== 0 && completed === false) {\n    alert('Congratulations, you completed your gold game!')\n    setCompleted(true)\n  } else {\n    return\n  }\n}, [appState, goal, completed])\n\nuseEffect (() => {\n  const goalButton = document.getElementsByClassName('goal-button')\n  if (goal !== 0) {\n    goalButton[0].disabled = true;\n  } else {\n    goalButton[0].disabled = false;\n  }\n}, [goal])\n\nuseEffect(() => {\n  const storedGoal = localStorage.getItem('goal')\n  const storedState = JSON.parse(localStorage.getItem('appState')) \n\n  const newState = storedState ? storedState : appState;\n  setAppState(newState)\n\n  const newGoal = storedGoal ? storedGoal : 0\n  setGoal(newGoal)\n}, [])\n\n  //Keeps the score list scrolled to the current end\n  function updateScroll () {\n    const element = document.getElementById('score-display');\n    element.scrollTop = (element.scrollHeight);\n  }\n\n  function sortDisplayText() {\n    for (var i = 0; i< appState[appState.length-1].displayText.length; i++) {\n      if (appState[appState.length-1].displayText[i] === 'X') {\n        appState[appState.length-1].displayText.splice(i,1)\n        xArray.push('X')\n        i--\n      } else if (appState[appState.length-1].displayText[i] === 'M') {\n        appState[appState.length-1].displayText.splice(i,1)\n        i--\n        mArray.push('M')\n      } else {\n        continue\n      }\n    }\n    appState[appState.length-1].displayText.sort((a,b) => parseInt(b)-parseInt(a))\n    appState[appState.length-1].displayText = xArray.concat(appState[appState.length-1].displayText, mArray)\n  }\n\n  //Decrements both total score and end score\n  function decrementScore () {\n    newState[newState.length-1].endScore--\n    newState[newState.length-1].totalScore--\n  }\n\n  //Increments total score and end score\n  function incrementScore() {\n    newState[newState.length-1].endScore++\n    newState[newState.length-1].totalScore++\n  } \n\n  //Function to change increment and decrement end score and total score based on either a value input or a value deleted. \n  function handleScoreChange (level, value, opt1, opt2) {\n    switch (level) {\n      case 'Beginner':\n        if (value > 6) {\n          opt1()\n        } else if (value === 6) {\n          break\n        } else if (value < 6) {\n          opt2()\n        }\n        break;\n      case 'Intermediate':\n        if (value > 7) {\n          opt1()\n        } else if (value === 7) {\n          break\n        } else if (value < 7) {\n          opt2()\n        }\n        break;\n      case 'Advanced':\n        if (value > 8) {\n          opt1()\n        } else if (value === 8) {\n          break\n        } else if (value < 8) {\n          opt2()\n        }\n        break;\n      case 'Elite':\n        if (value > 9) {\n          opt1()\n        } else if (value === 9) {\n          break\n        } else if (value < 9) {\n          opt2()\n        }\n        break;\n      default:\n        return\n    }\n  }\n\n  //Function for handling all inputs from ValueButton buttons\n  const handleButton = (e) => {\n    //Code that runs when next end button is pressed\n    if (e.value === \"NEXT END\"){\n      //sort previous end to be displayed in descending order\n      sortDisplayText()\n      newState = [...appState]\n      const lastTotal = newState[newState.length-1].totalScore\n      const nextEnd = {displayText: [], endValues: [], endScore: 0, totalScore: lastTotal}\n      newState.push(nextEnd)\n      setAppState(newState)\n      localStorage.setItem('appState', JSON.stringify(newState))\n      \n\n      //Code that runs when an arrow value is pressed\n    } else if (!isNaN(e.value)) {\n      newState = [...appState]\n      updateScroll()\n      if (newState[newState.length-1].endValues.length < 6) {\n        newState[newState.length-1].endValues.push(parseInt(e.value, 10))\n        newState[newState.length-1].displayText.push(e.innerHTML)\n        handleScoreChange(level, e.value, incrementScore, decrementScore)\n        setAppState(newState)\n        localStorage.setItem('appState', JSON.stringify(newState))\n      } else {\n        return\n      }\n\n      //Code that runs when clear is pressed\n    } else if (e.value === 'CLEAR') {\n      newState = [...appState]\n      const deletedValue = newState[newState.length-1].endValues.pop()\n      newState[newState.length-1].displayText.pop()\n      handleScoreChange(level, deletedValue, decrementScore, incrementScore)\n      setAppState(newState)\n      localStorage.setItem('appState', JSON.stringify(newState))\n    }\n  }\n\n  //Functions for the control panel\n  //----------------------------------------------------------------------------------------\n\n  //Updates the control panel rules section\n  const newRules =  (level) => {\n    const newRules = [...rules]\n    if (level === 'Beginner') {\n        newRules[0].neutral = 6\n\n    } else if (level === 'Intermediate') {\n        newRules[0].neutral = 7\n      \n\n    } else if (level === 'Advanced') {\n        newRules[0].neutral = 8\n\n    } else if (level === 'Elite') {\n        newRules[0].neutral = 9\n\n    }\n    newRules[0].addOne = newRules[0].neutral + 1\n    newRules[0].subOne = newRules[0].neutral - 1\n    setRules(newRules)\n    localStorage.setItem('rules', JSON.stringify(rules))\n  }\n\n  //Updates the level when a new one is selected\n  const handleLevel = (e) => {\n    let newLevel = ''\n    e.preventDefault()\n    if (appState[appState.length-1].endValues.length === 0) {\n      let options = document.getElementsByName('level')\n      for (var i = 0; i<options.length; i++) {\n        if (options[i].checked) {\n          newLevel = options[i].value\n          setLevel(newLevel)\n          break\n        } else {\n          continue\n        }\n      }\n    } else {\n      return\n    }\n  }\n\n  //Deletes current end and allows modifications to previous end\n  const lastEnd = () => {\n    if (appState.length > 1) {\n      newState = [...appState]\n      newState.pop()\n      setAppState(newState)\n    } else {\n      return\n    }\n  }\n\n  //Resets appState\n  const resetState = () => {\n    setAppState(\n      [\n        {\n          displayText: [],\n          endValues: [],\n          endScore: 0,\n          totalScore: 0\n        }\n      ]);\n    setCompleted(false);\n    setGoal(0);\n    document.getElementById('goal-input').value = '';\n    localStorage.clear();\n  }\n  \n  const handleGoal = () => {\n    const goalInput = document.getElementById('goal-input').value\n    localStorage.setItem('goal', goalInput)\n    setGoal(Number(goalInput))\n\n  }\n\n\n\n  \n  return (\n    <div className=\"App\">\n      <div className = \"scorecard\">\n        <ScoreDisplay appState = {appState} />\n        <ValueButtons handleButton = {handleButton} />\n      </div>\n      <div className = \"control-panel\">\n        <h3 className = \"control-title\">Control Panel</h3>\n        <SetGoal handleGoal = {handleGoal} />\n        <LevelRules level = {level} rules = {rules} goal = {goal} />\n        <SelectLevel handleLevel = {handleLevel} />\n\n        <div className = \"control-buttons\">\n          <button className = \"level-submit blue\" id = 'last' onClick = {lastEnd} >Last End</button>\n          <button className = \"level-submit blue mb-5\" id = 'reset' onClick = {resetState} >Reset</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n/*\nThings to add:\n\n-grey out buttons when they are not a valid action\n\n\n*/\n"]},"metadata":{},"sourceType":"module"}