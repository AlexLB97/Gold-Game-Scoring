{"ast":null,"code":"var _jsxFileName = \"/Users/Alex/Documents/Programming/Programming Projects/gold-game-scoring/src/App.js\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport ValueButtons from './components/ValueButtons';\nimport ScoreDisplay from './components/ScoreDisplay';\n\nfunction App() {\n  //Initial state. Later will incorporate a button in UI for changing level\n  const [level, setLevel] = useState('expert');\n  const [appState, setAppState] = useState([{\n    displayText: [],\n    endValues: [],\n    endScore: 0,\n    totalScore: 0\n  }]);\n\n  function updateScroll() {\n    const element = document.getElementById('score-display');\n    element.scrollTop = element.scrollHeight;\n  } //Initialize newState\n\n\n  let newState = [];\n\n  function decrementScore() {\n    newState[newState.length - 1].endScore--;\n    newState[newState.length - 1].totalScore--;\n  }\n\n  function incrementScore() {\n    newState[newState.length - 1].endScore++;\n    newState[newState.length - 1].totalScore++;\n  } //Function to handle scoring for both adding an arrow value or deleting one.\n\n\n  function handleInput(level, value, opt1, opt2) {\n    switch (level) {\n      case 'beginner':\n        if (value > 6) {\n          opt1();\n        } else if (value === 6) {\n          break;\n        } else if (value < 6) {\n          opt2();\n        }\n\n        break;\n\n      case 'intermediate':\n        if (value > 7) {\n          opt1();\n        } else if (value === 7) {\n          break;\n        } else if (value < 7) {\n          opt2();\n        }\n\n        break;\n\n      case 'advanced':\n        if (value > 8) {\n          opt1();\n        } else if (value === 8) {\n          break;\n        } else if (value < 8) {\n          opt2();\n        }\n\n        break;\n\n      case 'expert':\n        if (value > 9) {\n          opt1();\n        } else if (value === 9) {\n          break;\n        } else if (value < 9) {\n          opt2();\n        }\n\n        break;\n\n      default:\n        return;\n    }\n  } //Function to handle any button that is clicked. This could probably be broken down into\n  //small functions in the future.\n\n\n  const handleButton = e => {\n    //Code that runs when next end button is pressed\n    if (e.value === \"NEXT END\") {\n      //sort previous end to be displayed in descending order\n      appState[appState.length - 1].endValues.sort((a, b) => b - a);\n      newState = [...appState];\n      const lastTotal = newState[newState.length - 1].totalScore;\n      const nextEnd = {\n        displayText: [],\n        endValues: [],\n        endScore: 0,\n        totalScore: lastTotal\n      };\n      newState.push(nextEnd);\n      setAppState(newState); //Code that runs when an arrow value is pressed\n    } else if (!isNaN(e.value)) {\n      newState = [...appState];\n      updateScroll();\n\n      if (newState[newState.length - 1].endValues.length < 6) {\n        newState[newState.length - 1].endValues.push(parseInt(e.value, 10));\n        newState[newState.length - 1].displayText.push(e.innerHTML);\n        handleInput(level, e.value, incrementScore, decrementScore);\n        setAppState(newState);\n      } else {\n        return;\n      } //Code that runs when clear is pressed\n\n    } else if (e.value === 'CLEAR') {\n      newState = [...appState];\n      const deletedValue = newState[newState.length - 1].endValues.pop();\n      newState[newState.length - 1].displayText.pop();\n      handleInput(level, deletedValue, decrementScore, incrementScore);\n      setAppState(newState);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scorecard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ScoreDisplay, {\n    appState: appState,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ValueButtons, {\n    handleButton: handleButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"control-panel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;\n/*\nGold game scoring app\n\nKey functionality:\n  -choose level and format\n    -beginner, intermediate, advanced and expert levels\n    -choose 3, 6, or 9 arrow ends\n\n  -input arrow values and have them displayed in 'scorecard' section, along with\n  end points and total points\n    -app must only allow user to input the correct number of arrows each end\n    -backspace button to modify arrow values before submitting end\n    -next end button to move to the next line of scoring\n    -button for each score value: m-10.\n    -reset button to start over completely\n\n  -scoring levels\n    -beginner mode: \n      -7 ring and in is 1 point, 6 ring is neutral, 5 ring and out is -1\n    -intermediate mode\n      -8 ring and in is 1 point, 7 ring is neutral, 8 ring and out is -1\n    -advanced mode\n      -9 ring and in is 1 point, 8 is neutral, 7 and out -1\n    -expert mode\n      -10 ring is one point, 9 is neutral, 8 ring and out is -1\n\n\nApp Design\n\n  Components\n    App container\n      -parent container for entire app\n\n    Scoring interface\n      -contains the scoring buttons and scorecard\n      Arrow values\n        -the group of buttons including m-X, backspace, next end, and reset\n      Scorecard\n        -lists the arrow values for each end, their corresponding gold game score,\n         and the total score for the round\n      \n    Settings interface\n      -sidebar to the scoring interface\n\n      Select level component\n        -radio buttons to choose between beginner, intermediate, advanced, and expert\n\n      Choose format component\n        -radio buttons for 3, 6, or 9 arrow ends\n\n      Explanation section:\n        -explains the rules for the level they have selected\n\n\nPseuocode for components\n\n  App container\n    Styles:\n      -center the app in the screen\n      -set the display to flex\n      -set flex direction to row\n    Global state\n      -end arrow values and the resulting gold game score are stored in global state\n      -each end is a new object in the state array\n    Logic\n      -\n\n\n\n*/","map":{"version":3,"sources":["/Users/Alex/Documents/Programming/Programming Projects/gold-game-scoring/src/App.js"],"names":["React","useState","ValueButtons","ScoreDisplay","App","level","setLevel","appState","setAppState","displayText","endValues","endScore","totalScore","updateScroll","element","document","getElementById","scrollTop","scrollHeight","newState","decrementScore","length","incrementScore","handleInput","value","opt1","opt2","handleButton","e","sort","a","b","lastTotal","nextEnd","push","isNaN","parseInt","innerHTML","deletedValue","pop"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport ValueButtons from './components/ValueButtons';\nimport ScoreDisplay from './components/ScoreDisplay';\n\n\nfunction App() {\n  //Initial state. Later will incorporate a button in UI for changing level\n  const [level, setLevel] = useState('expert')\n  const [appState, setAppState] = useState(\n    [\n      {\n        displayText: [],\n        endValues: [],\n        endScore: 0,\n        totalScore: 0\n      }\n    ]);\n  \n  function updateScroll () {\n    const element = document.getElementById('score-display');\n    element.scrollTop = (element.scrollHeight);\n  }\n\n    //Initialize newState\n  let newState = []\n\n  function decrementScore () {\n    newState[newState.length-1].endScore--\n    newState[newState.length-1].totalScore--\n  }\n\n  function incrementScore() {\n    newState[newState.length-1].endScore++\n    newState[newState.length-1].totalScore++\n  } \n\n  //Function to handle scoring for both adding an arrow value or deleting one.\n  function handleInput (level, value, opt1, opt2) {\n    switch (level) {\n      case 'beginner':\n        if (value > 6) {\n          opt1()\n        } else if (value === 6) {\n          break\n        } else if (value < 6) {\n          opt2()\n        }\n        break;\n      case 'intermediate':\n        if (value > 7) {\n          opt1()\n        } else if (value === 7) {\n          break\n        } else if (value < 7) {\n          opt2()\n        }\n        break;\n      case 'advanced':\n        if (value > 8) {\n          opt1()\n        } else if (value === 8) {\n          break\n        } else if (value < 8) {\n          opt2()\n        }\n        break;\n      case 'expert':\n        if (value > 9) {\n          opt1()\n        } else if (value === 9) {\n          break\n        } else if (value < 9) {\n          opt2()\n        }\n        break;\n      default:\n        return\n    }\n  }\n  \n  //Function to handle any button that is clicked. This could probably be broken down into\n  //small functions in the future.\n  const handleButton = (e) => {\n    //Code that runs when next end button is pressed\n    if (e.value === \"NEXT END\"){\n      //sort previous end to be displayed in descending order\n      appState[appState.length-1].endValues.sort((a,b) => b-a)\n      newState = [...appState]\n      const lastTotal = newState[newState.length-1].totalScore\n      const nextEnd = {displayText: [], endValues: [], endScore: 0, totalScore: lastTotal ,}\n      newState.push(nextEnd)\n      setAppState(newState)\n      \n\n      //Code that runs when an arrow value is pressed\n    } else if (!isNaN(e.value)) {\n      newState = [...appState]\n      updateScroll()\n      if (newState[newState.length-1].endValues.length < 6) {\n        newState[newState.length-1].endValues.push(parseInt(e.value, 10))\n        newState[newState.length-1].displayText.push(e.innerHTML)\n        handleInput(level, e.value, incrementScore, decrementScore)\n        setAppState(newState)\n      } else {\n        return\n      }\n\n      //Code that runs when clear is pressed\n    } else if (e.value === 'CLEAR') {\n      newState = [...appState]\n      const deletedValue = newState[newState.length-1].endValues.pop()\n      newState[newState.length-1].displayText.pop()\n      handleInput(level, deletedValue, decrementScore, incrementScore)\n      setAppState(newState)\n    }\n  }\n\n  \n  return (\n    <div className=\"App\">\n      <div className = \"scorecard\">\n        <ScoreDisplay appState = {appState} />\n        <ValueButtons handleButton = {handleButton} />\n      </div>\n      <div className = \"control-panel\">\n        \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n/*\nGold game scoring app\n\nKey functionality:\n  -choose level and format\n    -beginner, intermediate, advanced and expert levels\n    -choose 3, 6, or 9 arrow ends\n\n  -input arrow values and have them displayed in 'scorecard' section, along with\n  end points and total points\n    -app must only allow user to input the correct number of arrows each end\n    -backspace button to modify arrow values before submitting end\n    -next end button to move to the next line of scoring\n    -button for each score value: m-10.\n    -reset button to start over completely\n\n  -scoring levels\n    -beginner mode: \n      -7 ring and in is 1 point, 6 ring is neutral, 5 ring and out is -1\n    -intermediate mode\n      -8 ring and in is 1 point, 7 ring is neutral, 8 ring and out is -1\n    -advanced mode\n      -9 ring and in is 1 point, 8 is neutral, 7 and out -1\n    -expert mode\n      -10 ring is one point, 9 is neutral, 8 ring and out is -1\n\n\nApp Design\n\n  Components\n    App container\n      -parent container for entire app\n\n    Scoring interface\n      -contains the scoring buttons and scorecard\n      Arrow values\n        -the group of buttons including m-X, backspace, next end, and reset\n      Scorecard\n        -lists the arrow values for each end, their corresponding gold game score,\n         and the total score for the round\n      \n    Settings interface\n      -sidebar to the scoring interface\n\n      Select level component\n        -radio buttons to choose between beginner, intermediate, advanced, and expert\n\n      Choose format component\n        -radio buttons for 3, 6, or 9 arrow ends\n\n      Explanation section:\n        -explains the rules for the level they have selected\n\n\nPseuocode for components\n\n  App container\n    Styles:\n      -center the app in the screen\n      -set the display to flex\n      -set flex direction to row\n    Global state\n      -end arrow values and the resulting gold game score are stored in global state\n      -each end is a new object in the state array\n    Logic\n      -\n\n\n\n*/\n"]},"metadata":{},"sourceType":"module"}